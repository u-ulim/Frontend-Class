// 자바스크립트는 몇 개의 배열을 넣을 지 fixed하고 가야한다.

int arr[5] = [1, 2, 3, 4, 5, 6, 7]; // 여기서 6, 7을 넣게 되면 오류가 발생한다. 

// 자바, 파이썬, C와 같은 전통적인 프로그래밍 언어에서는 반복문을 사용할 수 있는 배열을 선언할 때, 선언단계부터 몇 개의 데이터를 처리할지 사전 정의
// => 애초에 처음부터

// 자바스크립트는 동적으로 배열의 크기를 조절할 수 있기 때문에 이러한 제한이 없다. 그래서 알고리즘과 자료구조에 관한 책이 많이 없다. 
// 배열은 사실, 배열의 갯수가 정의가 되어있어야 한다.

// 만약 이 에러를 벗어나고 싶다면? 

// int arr[5] = [1,2,3,4,5] 
// int arr[20] = [1, 2, 3]
// P.1 컴퓨터가 조금 느려지는 것을 감안한다면? 
// P.2 시간이 경과 => 20개 // 20개로는 안 되겠는데? 

// 이러한 문제가 많이 발생한다. 

// 해결방법 : 참조타입
// 왜 참조타입인가? 
// heap: 메모리공간
// 참조타입은 메모리 공간에 직접적으로 저장되는 것이 아니라, 메모리 공간의 주소를 참조하는 방식으로 데이터를 저장하고 관리한다. 
// 배열 안에 있는 첫번째 인덱스값만 알고 있어도, 두번째 세번째 인덱스값은 알아서 해당 주소를 통해서 찾아오는 특징이 있다. 

// 배열의 장점은 읽어오는데 굉장히 효율적인 자료 구조이다. 
// 이미 자료구조의 형식, 사이즈를 가지고 태어나기 때문에 해당 배열의 첫번째 혹은 마지막번 째에 순차적으로 값을 추가하는 효율적

// 배열 단점 : 최초에 배열 데이터를 생성하는 시점에서 배열 안에 입력되어야 하는 데이터의 총 개수가 미정인 경우,

// 값이 추가되었을 때 , 해당 값이 개발자가 원하는 정확한 위치에 추가 혹은 삭제해야하는 경우

// 자료구조를 이야기 할 때에는 배열 & 연결리스트를 함께 이야기 해야한다. 



// ********************* // 연결리스트! 


// 연결리스트 자료구조 : 산발적으로 흩어져있는 데이터를 필요에 따라서 하나의 연결 된 리스트의 자료구조로 만들어주는 장점이 있음. 

// stack에 있는 것을 재활용. stack과 배열 / 연결리스트로 어떻게 만드는가?

// 연결리스트도 장점만 있지는 않고 단점도 분명히 존재한다. (빠르고 효율적이지만)
// => 연결리스트의 경우: 값을 찾아서 불러오는데 배열 대비 상대적인 시간이 많이 걸림


// 만약 여러분들이 어떤 프로젝트 & 제품을 만드는데 있어서 데이터의 입출력 및 편집이 빈번하게 일어나야하는 상황이라면 ,
// 연결리스트가 훨씬 효율적인 자료구조이다. 

// 만약 컴포넌트가 마운트 되는 시점에 Server로부터 전달받은 자료의 수정, 편집이 거의 일어나지 않는 정적인 형태의 프로젝트 및 제품이라면 당연히 배열

// 배열이라는 자료구조가 사용할 수 있는 다양한 메서드 함수 & 속성

// 연결리스트 역시 사용할 수 있는 다양한 함수 혹은 속성 구현 

// 추상자료형 : 연결리스트의 자료구조가 사용할 수 있는 기능을 담고 있는 함수 및 속성

// 연결리스트는 무엇이며, 연결리스트가 사용하고자 하는 기능을 추상자료형의 형태로 구현한다. 

// 연결리스트를 활용해서 UI로 모든 데이터를 출력  = printAll()

// 연결리스트를 활용해서 UI에 출력중인 모든 데이터를 제거하는 추상자료형  = clear()

// 연결리스트를 활용해서 특정 인덱스값을 삽입하는 추상자료형  = insertAt(index, data)

// 연결리스트를 활용해서 특정 인덱스값을 제거하는 추상자료형  = deleteLast()

// 연결리스트를 활용해서 마지막 인덱스값을 추가하는 추상자료형 insertLast() 

// 연결리스트를 활용해서 특정 인덱스값을 읽어오는 추상자료형 = getNodeAt(index)





